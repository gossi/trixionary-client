{% extends "frame.twig" %}

{% block main %}
<h2>Graph</h2>

<div id="widget">
	<div id="graph"></div>
	<div id="info" class="hidden">
		<img class="preview pull-right">
		<a></a>
		<p class="description"></p>
		<p>{{ trans('importance') }}: <span class="importance"></span></p>
		<p>{{ trans('generation') }}: <span class="generation"></span></p>
	</div>
	<div class="btn-group btn-group-sm" id="controls" role="group">

		<!-- <div class="btn-group btn-group-sm" role="group">
			<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
	    		Filters <span class="caret"></span>
	  		</button>
			<ul class="dropdown-menu" role="menu">
				<li><a href="#">Variations</a></li>
				<li><a href="#">Transitions</a></li>
			</ul>
		</div>-->
		<button type="button" class="btn btn-default" id="fullscreen"><span class="glyphicon glyphicon-fullscreen"></span></button>
	</div>
</div>

<script>
// actions
var widget = document.getElementById('widget');
var fullscreen = document.getElementById('fullscreen');
var dropdowns = document.querySelectorAll('#controls .dropdown-menu');
fullscreen.addEventListener('click', function(e) {
	BigScreen.toggle(widget, onFullscreenEntered, onFullscreenExited, function() {});
});
BigScreen.onExit = onFullscreenExited;
function onFullscreenEntered() {
	widget.classList.add('fullscreen');
	fullscreen.classList.add('active');
	graph.redraw();
	for (var i = 0; i < dropdowns.length; i++) {
		dropdowns[i].classList.add('dropdown-menu-right');
	}
}
function onFullscreenExited() {
	widget.classList.remove('fullscreen');
	fullscreen.classList.remove('active');
	graph.redraw();
	for (var i = 0; i < dropdowns.length; i++) {
		dropdowns[i].classList.remove('dropdown-menu-right');
	}
}
window.addEventListener('resize', function (e) {
	graph.redraw();
});


// vis
var info = document.getElementById('info');
var picture = document.querySelector('#info img');
var link = document.querySelector('#info a');
var desc = document.querySelector('#info .description');
var importance = document.querySelector('#info .importance');
var generation = document.querySelector('#info .generation');
var container = document.getElementById('graph');

var nodes = new vis.DataSet({{ nodes|raw }});
var edges = new vis.DataSet({{ edges|raw }});

var data = {
    nodes: nodes,
    edges: edges
};
var highlight = {
	background: '#EEE',
	border: '#777'
};
var normal = {
	background: '#DDD',
	border: '#AAA'
};
var options = {
	hierarchicalLayout: {
		nodeSpacing: 50,
		levelSeparation: 175,
		direction: 'LR',
		layout: 'direction'
	},
	nodes: {
		borderWidthSelected: 1.1,
		shape: 'box',
		radius: 5,
		color: {
			background: '#DDD',
			border: '#AAA',
			highlight: highlight
		}
	},
	groups: {
		selected: {
			shape: 'box',
			radius: 5,
			color: {
				background: '#EEE',
				border: '#777'
			}
		}
	},
	edges: {
		arrowScaleFactor: 0.7,
		style: 'arrow',
		widthSelectionMultiplier: 1.1,
		color: {
			color: '#AAA',
			highlight: '#777'
		},
		inheritColor: false
	},
	smoothCurves: false,
	navigation: true
};
var graph = new vis.Network(container, data, options);
var selecting = false;
var lastSelection = null;
graph.on('select', function(e) {
	if (selecting) {
		return;
	}
	if (lastSelection !== null) {
		lastSelection.color = normal;
		nodes.update(lastSelection);
		lastSelection = null;
	}
	selecting = true;
	if (e.nodes && e.nodes.length && e.nodes.length > 0) {
		var id = e.nodes[0];
		var node = nodes.get(id);

		try {
			if (node.edges) {
				var edges = node.edges;
			} else {
				var edges = [];
				node.generationIds.reduce(function (a, b) {
					edges.push(a + '-' + b);
					return b;
				});
				edges.push(node.generationIds[node.generationIds.length - 1] + '-' + id);
				node.edges = edges;
			}
			node.color = highlight;
			nodes.update(node);
			lastSelection = node;
			graph.selectEdges(edges);
		} catch (e) {}
		
		info.classList.remove('hidden');
		link.href = '{{ url_pattern }}'.replace('_skill_', node.slug);
		link.innerHTML = node.label;
		desc.innerHTML = node.description;
		importance.innerHTML = node.importance;
		generation.innerHTML = node.generation;

		if (node.picture) {
			picture.src = node.picture;
			picture.classList.remove('hidden');
		} else {
			picture.classList.add('hidden');
		}
	} else {
		info.classList.add('hidden');
	}
	selecting = false;
});
</script>
{% endblock %}