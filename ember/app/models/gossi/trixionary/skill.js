import Model from 'ember-data/model';
import attr from 'ember-data/attr';
import { belongsTo, hasMany } from 'ember-data/relationships';

export default Model.extend({
	name: attr('string'),
	alternativeName: attr('string'),
	slug: attr('string'),
	description: attr('string'),
	history: attr('string'),
	isTranslation: attr('boolean'),
	isRotation: attr('boolean'),
	isAcyclic: attr('boolean', {defaultValue: true}),
	isCyclic: attr('boolean', {defaultValue: false}),
	longitudinalFlags: attr('number'),
	latitudinalFlags: attr('number'),
	transversalFlags: attr('number'),
	movementDescription: attr('string'),
	isComposite: attr('boolean'),
	isMultiple: attr('boolean'),
	multiplier: attr('number'),
	generation: attr('number'),
	importance: attr('number'),
	generationIds: attr('string'),
	version: attr('number'),
	versionCreatedAt: attr('date'),
	versionComment: attr('string'),
	sport: belongsTo('gossi.trixionary/sport', {inverse: 'skills'}),
	variations: hasMany('gossi.trixionary/skill', {inverse: 'variationOf'}),
	variationOf: belongsTo('gossi.trixionary/skill', {inverse: 'variations'}),
	multiples: hasMany('gossi.trixionary/skill', {inverse: 'multipleOf'}),
	multipleOf: belongsTo('gossi.trixionary/skill', {inverse: 'multiples'}),
	object: belongsTo('gossi.trixionary/object', {inverse: 'skills'}),
	startPosition: belongsTo('gossi.trixionary/position'),
	endPosition: belongsTo('gossi.trixionary/position'),
	featuredPicture: belongsTo('gossi.trixionary/picture', {inverse: null}),
	kstrukturRoot: belongsTo('gossi.trixionary/kstruktur', {inverse: 'rootSkills'}),
	functionPhaseRoot: belongsTo('gossi.trixionary/function-phase', {inverse: 'rootSkills'}),
	descendents: hasMany('gossi.trixionary/skill', {inverse: 'ascendents'}),
	ascendents: hasMany('gossi.trixionary/skill', {inverse: 'descendents'}),
	parts: hasMany('gossi.trixionary/skill', {inverse: 'composites'}),
	composites: hasMany('gossi.trixionary/skill', {inverse: 'parts'}),
	groups: hasMany('gossi.trixionary/group'),
	pictures: hasMany('gossi.trixionary/picture'),
	videos: hasMany('gossi.trixionary/video'),
	references: hasMany('gossi.trixionary/reference'),
	kstrukturs: hasMany('gossi.trixionary/kstruktur'),
	functionPhases: hasMany('gossi.trixionary/function-phase')
});
